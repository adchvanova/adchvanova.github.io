<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic</title>
    <link>https://example.com/ru/tag/academic/</link>
      <atom:link href="https://example.com/ru/tag/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>Academic</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru</language><lastBuildDate>Tue, 24 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Academic</title>
      <link>https://example.com/ru/tag/academic/</link>
    </image>
    
    <item>
      <title>Научные языки программирования</title>
      <link>https://example.com/ru/post/scientific-programming-languages/</link>
      <pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/scientific-programming-languages/</guid>
      <description>&lt;h2 id=&#34;научные-языки-программирования-и-среды&#34;&gt;Научные языки программирования и среды.&lt;/h2&gt;
&lt;p&gt;По мере того, как компьютеры становятся все более распространенными в физических исследованиях (и научных исследованиях в целом), вопрос о том, какие языки программирования использовать, становится все более важным. Факторы, которые особенно влияют на важность этого вопроса:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;возрастающая сложность программируемых задач;
возрастающая сложность и разнообразие программируемых машин;
все более широкое использование графической визуализации и взаимодействия с научными программами; а также
растущее число языков программирования, доступных для программирования.

С и С++
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C — интересный выбор в качестве научного языка. Он чрезвычайно гибкий и доступен практически на каждой машине, известной человеку. Кроме того, один из лучших компиляторов C (gcc) доступен бесплатно. Почти все пакеты визуализации и пользовательского интерфейса поддерживают язык C. C часто преподается как первый или второй язык на факультетах информатики университетов.&lt;/p&gt;
&lt;p&gt;Давняя претензия к C заключается в том, что он производит более медленный код, чем эквивалентный Fortran. В настоящее время скорость компьютеров удваивается каждый год или около того, и компиляторы C, похоже, не так уж плохи по сравнению с Fortran (типичный код C работает на 50–100% быстрее, чем эквивалентный Fortran, в зависимости от приложения). В свете этого я думаю, что трудно отказаться от C из-за скорости кода, который он производит.&lt;/p&gt;
&lt;p&gt;Тем не менее, я не думаю, что это хороший научный язык программирования. Язык C довольно близок к аппаратному обеспечению, и при написании приложения довольно легко допустить большие ошибки. Эти ошибки часто не проявляются в небольших тестовых примерах, поскольку они связаны с проблемами управления памятью и т.п. Кроме того, программирование больших приложений на C требует определенной степени профессионализма, что означает достаточно глубокое знание языка. Таким образом, это плохой язык для основного научного программирования; как правило, только создатель программы или люди с реальным опытом в области компьютерного программирования смогут понять большое приложение на C, если оно не будет написано очень тщательно.&lt;/p&gt;
&lt;p&gt;Я считаю, что эти комментарии применимы и к кодированию на C++. Опасения по поводу удобочитаемости и профессионализма применимы здесь, возможно, даже в большей степени, чем к «просто C». Преимущество C++ состоит в том, что он является самым популярным объектно-ориентированным языком, но он также признан довольно загадочным. Опять же, необходима определенная степень профессионализма, чтобы запрограммировать приложение на C++, понятное другим. Пакеты, которые автоматически генерируют код C++ из заданного пользователем псевдокода, помогают облегчить проблему, но тогда мы сталкиваемся с просьбой ко всем пользователям использовать один и тот же генератор C++, что является еще одной проблемой того же масштаба.&lt;/p&gt;
&lt;p&gt;Вышеуказанные два являются «традиционными» вариантами. Теперь я перехожу к более новым языкам, менее известным в научном сообществе.
питон
Python — это объектно-ориентированный расширяемый интерпретируемый язык. Он работает практически на всех системах Unix, а также на платформах DOS/Windows и на Mac. Это бесплатно и поставляется с полным исходным кодом. Начать использовать Python очень просто — на простом уровне он напоминает Basic и может использоваться в интерактивном режиме так же, как и Basic. Однако он поддерживает объектные методы и хорошо &amp;ldquo;масштабируется&amp;rdquo;. Масштабирование указывает на относительную сложность написания небольших и больших приложений. Средства объекта помогают и поощряют писать приложение небольшими частями. Эти маленькие части могут быть объединены в большую программу, а маленькие части могут также использоваться в других приложениях.&lt;/p&gt;
&lt;p&gt;Еще одним преимуществом Python является его расширяемость. Можно написать библиотеку объектов на C, C++ или родном Python, которую затем можно динамически или статически связать с основной системой Python и использовать в программах Python. Это можно использовать для создания программируемого приложения, такого как пакет для построения графиков данных. Можно добавить в интерпретатор пакет, содержащий команды для настройки ваших графиков и фактического построения данных. Этому интерпретатору Python+графики можно дать другое имя, например &amp;ldquo;pygraph&amp;rdquo;, и вызвать его как команду. Интерпретатор будет обрабатывать графические команды и выполнять их. Однако в то же время вы можете использовать любую другую допустимую команду Python в качестве команды для этой графической программы! Таким образом, один графический входной файл для этой программы мог сначала вычислить результат, а затем обработать его и построить его.&lt;/p&gt;
&lt;p&gt;Переход от этого к системам пакетов Python+, таким как программы анализа данных или программы управления экспериментами, довольно очевиден. Это также может в некоторой степени решить упомянутую выше дилемму об использовании C++. Профессиональный программист может создать четко определенный пакет библиотеки с четко определенным интерфейсом на C++, который может быть включен в программы Python для использования. Поскольку Python почти так же читаем, как и Fortran, «нормальный человек» (то есть тот, кто не является профессиональным программистом) может использовать эту библиотеку в своих программах. И профессионалы, которым нужны мощь и эффективность C или C+&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Работа с библиографией</title>
      <link>https://example.com/ru/post/working-with-bibliography/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/working-with-bibliography/</guid>
      <description>&lt;h2 id=&#34;в-рабочей-библиографии-перечислены-все-источники-которые-вы-можете-использовать-в-своем-исследовательском-эссе&#34;&gt;В рабочей библиографии перечислены все источники, которые вы можете использовать в своем исследовательском эссе.&lt;/h2&gt;
&lt;p&gt;В рабочей библиографии перечислены все источники, которые вы можете использовать в своем исследовательском эссе. Это «рабочий» документ в двух отношениях. Во-первых, она будет меняться на протяжении всего исследовательского процесса — расширяться каждый раз, когда вы добавляете потенциально полезный источник, и сужаться, когда вы опускаете источники, которые оказались менее актуальными, чем вы ожидали. Кроме того, как только вы напишете эссе, ваша рабочая библиография изменится в последний раз, став списком цитируемых работ. Во-вторых, вы можете использовать свою библиографию для организации и отслеживания своей исследовательской «работы». С этой целью некоторые исследователи делят библиографию на три части: (1) источники, которые им необходимо найти, (2) источники, которые они обнаружили и думают, что будут использовать, и (3) источники, которые они обнаружили, но считают, что они, вероятно, будут использоваться. не будет использовать.
Поскольку вам нужно будет регулярно обновлять свою библиографию и поскольку она в конечном итоге станет ядром вашего списка цитируемых работ, вам следует подумать об использовании компьютера. В этом случае вам нужно будет распечатать копию или взять с собой ноутбук каждый раз, когда вы идете в библиотеку. Однако некоторые исследователи считают полезным также или вместо них использовать карточки для заметок, создавая отдельную карточку для каждого источника. Затем вы можете физически разделить карты, посвященные источникам, которые необходимо найти, уже обнаруженным источникам и «отклоненным» источникам. Однако на случай, если ваши карты перепутаются, вы также всегда должны указывать статус источника на карте.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык Markdown</title>
      <link>https://example.com/ru/post/markdown-language/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/markdown-language/</guid>
      <description>&lt;h2 id=&#34;markdown-должен-быть-настолько-простым-для-чтения-и-написания-насколько-это-возможно&#34;&gt;Markdown должен быть настолько простым для чтения и написания, насколько это возможно.&lt;/h2&gt;
&lt;p&gt;Читаемость, однако, подчеркивается прежде всего. Документ в формате Markdown должен публиковаться как есть, как обычный текст, и не выглядеть так, как будто он был размечен тегами или инструкциями по форматированию. Хотя на синтаксис Markdown повлияло несколько существующих фильтров преобразования текста в HTML , включая Setext, atx, Textile, reStructuredText, Grutatext и EtText , единственным источником вдохновения для синтаксиса Markdown является формат электронной почты в виде обычного текста.&lt;/p&gt;
&lt;p&gt;С этой целью синтаксис Markdown полностью состоит из знаков пунктуации, которые были тщательно подобраны так, чтобы они выглядели так, как они означают. Например, звездочки вокруг слова на самом деле выглядят как &lt;em&gt;выделение&lt;/em&gt;. Списки Markdown выглядят как списки. Даже цитаты выглядят как цитируемые фрагменты текста, если вы когда-либо пользовались электронной почтой.&lt;/p&gt;
&lt;p&gt;Markdown не является заменой HTML и даже близко к нему. Его синтаксис очень мал и соответствует только очень небольшому подмножеству тегов HTML. Идея не в том, чтобы создать синтаксис, облегчающий вставку тегов HTML. На мой взгляд, теги HTML уже легко вставлять. Идея Markdown состоит в том, чтобы упростить чтение, написание и редактирование прозы. HTML — это формат публикации; Markdown — это формат письма. Таким образом, синтаксис форматирования Markdown решает только проблемы, которые можно передать в виде обычного текста.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Добро пожаловать в Wowchemy, конструктор сайтов для Hugo</title>
      <link>https://example.com/ru/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;обзор&#34;&gt;Обзор&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Конструктор веб-сайтов Wowchemy для Hugo вместе с его начальными шаблонами предназначен для профессиональных создателей, преподавателей и команд/организаций, хотя его можно использовать для создания любого типа сайта.&lt;/li&gt;
&lt;li&gt;Шаблон можно изменить и настроить в соответствии с вашими потребностями. Это хорошая платформа для тех, кто хочет взять под контроль свои данные и онлайн-идентификацию, имея при этом удобство начать с &lt;strong&gt;решения без кода (пишите в Markdown и настраивайте с помощью параметров YAML)&lt;/strong&gt; и имея &lt;strong&gt;гибкость для последующего использования. добавьте еще более глубокую персонализацию с помощью HTML и CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Вы можете работать со всеми вашими любимыми инструментами и приложениями с сотнями плагинов и интеграций, чтобы ускорить ваши рабочие процессы, взаимодействовать с вашими читателями и многое другое.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Контроль версий Git</title>
      <link>https://example.com/ru/post/version_control/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://example.com/ru/post/version_control/</guid>
      <description>&lt;h2 id=&#34;что-такое-контроль-версий-и-почему-вас-это-должно-волновать&#34;&gt;Что такое «контроль версий» и почему вас это должно волновать?&lt;/h2&gt;
&lt;p&gt;Контроль версий — это система, которая записывает изменения в файле или наборе файлов с течением времени, чтобы вы могли позже вызвать определенные версии. Для примеров в этой книге вы будете использовать исходный код программного обеспечения в качестве файлов, контролируемых версиями, хотя на самом деле вы можете сделать это практически с любым типом файла на компьютере.&lt;/p&gt;
&lt;p&gt;Если вы графический или веб-дизайнер и хотите сохранить каждую версию изображения или макета (что вам, безусловно, нужно), очень разумно использовать систему контроля версий (VCS). Это позволяет вам возвращать выбранные файлы обратно в предыдущее состояние, возвращать весь проект обратно в предыдущее состояние, сравнивать изменения во времени, видеть, кто последним изменил что-то, что может вызвать проблему, кто внес проблему и когда, и многое другое. Использование VCS также обычно означает, что если вы что-то испортите или потеряете файлы, вы сможете легко восстановиться. Кроме того, вы получаете все это за очень небольшие накладные расходы.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
